// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/nfs-7/userdata/phchang/babies/WVZMVA2018_v0.1.15/wwz_4l2v_amcatnlo_1.root", "t", "wvztree", "tas", "wvz")

#ifndef wvztree_H
#define wvztree_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class wvztree {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  int      isData_;
  TBranch *isData_branch;
  bool     isData_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  float    genps_weight_;
  TBranch *genps_weight_branch;
  bool     genps_weight_isLoaded;
  float    xsec_br_;
  TBranch *xsec_br_branch;
  bool     xsec_br_isLoaded;
  int      evt_passgoodrunlist_;
  TBranch *evt_passgoodrunlist_branch;
  bool     evt_passgoodrunlist_isLoaded;
  TString *CMS4path_;
  TBranch *CMS4path_branch;
  bool     CMS4path_isLoaded;
  int      CMS4index_;
  TBranch *CMS4index_branch;
  bool     CMS4index_isLoaded;
  float    weight_fr_r1_f1_;
  TBranch *weight_fr_r1_f1_branch;
  bool     weight_fr_r1_f1_isLoaded;
  float    weight_fr_r1_f2_;
  TBranch *weight_fr_r1_f2_branch;
  bool     weight_fr_r1_f2_isLoaded;
  float    weight_fr_r1_f0p5_;
  TBranch *weight_fr_r1_f0p5_branch;
  bool     weight_fr_r1_f0p5_isLoaded;
  float    weight_fr_r2_f1_;
  TBranch *weight_fr_r2_f1_branch;
  bool     weight_fr_r2_f1_isLoaded;
  float    weight_fr_r2_f2_;
  TBranch *weight_fr_r2_f2_branch;
  bool     weight_fr_r2_f2_isLoaded;
  float    weight_fr_r2_f0p5_;
  TBranch *weight_fr_r2_f0p5_branch;
  bool     weight_fr_r2_f0p5_isLoaded;
  float    weight_fr_r0p5_f1_;
  TBranch *weight_fr_r0p5_f1_branch;
  bool     weight_fr_r0p5_f1_isLoaded;
  float    weight_fr_r0p5_f2_;
  TBranch *weight_fr_r0p5_f2_branch;
  bool     weight_fr_r0p5_f2_isLoaded;
  float    weight_fr_r0p5_f0p5_;
  TBranch *weight_fr_r0p5_f0p5_branch;
  bool     weight_fr_r0p5_f0p5_isLoaded;
  float    weight_pdf_up_;
  TBranch *weight_pdf_up_branch;
  bool     weight_pdf_up_isLoaded;
  float    weight_pdf_down_;
  TBranch *weight_pdf_down_branch;
  bool     weight_pdf_down_isLoaded;
  float    weight_alphas_down_;
  TBranch *weight_alphas_down_branch;
  bool     weight_alphas_down_isLoaded;
  float    weight_alphas_up_;
  TBranch *weight_alphas_up_branch;
  bool     weight_alphas_up_isLoaded;
  float    weight_nominal_;
  TBranch *weight_nominal_branch;
  bool     weight_nominal_isLoaded;
  int      HLT_DoubleMu_;
  TBranch *HLT_DoubleMu_branch;
  bool     HLT_DoubleMu_isLoaded;
  int      HLT_DoubleEl_;
  TBranch *HLT_DoubleEl_branch;
  bool     HLT_DoubleEl_isLoaded;
  int      HLT_MuEG_;
  TBranch *HLT_MuEG_branch;
  bool     HLT_MuEG_isLoaded;
  int      pass_duplicate_ee_em_mm_;
  TBranch *pass_duplicate_ee_em_mm_branch;
  bool     pass_duplicate_ee_em_mm_isLoaded;
  int      pass_duplicate_mm_em_ee_;
  TBranch *pass_duplicate_mm_em_ee_branch;
  bool     pass_duplicate_mm_em_ee_isLoaded;
  float    gen_ht_;
  TBranch *gen_ht_branch;
  bool     gen_ht_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gen_V_p4_;
  TBranch *gen_V_p4_branch;
  bool     gen_V_p4_isLoaded;
  vector<float> *gen_V_pt_;
  TBranch *gen_V_pt_branch;
  bool     gen_V_pt_isLoaded;
  vector<float> *gen_V_eta_;
  TBranch *gen_V_eta_branch;
  bool     gen_V_eta_isLoaded;
  vector<float> *gen_V_phi_;
  TBranch *gen_V_phi_branch;
  bool     gen_V_phi_isLoaded;
  vector<float> *gen_V_mass_;
  TBranch *gen_V_mass_branch;
  bool     gen_V_mass_isLoaded;
  vector<int> *gen_V_id_;
  TBranch *gen_V_id_branch;
  bool     gen_V_id_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gen_lep_p4_;
  TBranch *gen_lep_p4_branch;
  bool     gen_lep_p4_isLoaded;
  vector<float> *gen_lep_pt_;
  TBranch *gen_lep_pt_branch;
  bool     gen_lep_pt_isLoaded;
  vector<float> *gen_lep_eta_;
  TBranch *gen_lep_eta_branch;
  bool     gen_lep_eta_isLoaded;
  vector<float> *gen_lep_phi_;
  TBranch *gen_lep_phi_branch;
  bool     gen_lep_phi_isLoaded;
  vector<float> *gen_lep_mass_;
  TBranch *gen_lep_mass_branch;
  bool     gen_lep_mass_isLoaded;
  vector<int> *gen_lep_id_;
  TBranch *gen_lep_id_branch;
  bool     gen_lep_id_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gen_child_p4_;
  TBranch *gen_child_p4_branch;
  bool     gen_child_p4_isLoaded;
  vector<float> *gen_child_pt_;
  TBranch *gen_child_pt_branch;
  bool     gen_child_pt_isLoaded;
  vector<float> *gen_child_eta_;
  TBranch *gen_child_eta_branch;
  bool     gen_child_eta_isLoaded;
  vector<float> *gen_child_phi_;
  TBranch *gen_child_phi_branch;
  bool     gen_child_phi_isLoaded;
  vector<float> *gen_child_mass_;
  TBranch *gen_child_mass_branch;
  bool     gen_child_mass_isLoaded;
  vector<int> *gen_child_id_;
  TBranch *gen_child_id_branch;
  bool     gen_child_id_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gen_part_p4_;
  TBranch *gen_part_p4_branch;
  bool     gen_part_p4_isLoaded;
  vector<float> *gen_part_pt_;
  TBranch *gen_part_pt_branch;
  bool     gen_part_pt_isLoaded;
  vector<float> *gen_part_eta_;
  TBranch *gen_part_eta_branch;
  bool     gen_part_eta_isLoaded;
  vector<float> *gen_part_phi_;
  TBranch *gen_part_phi_branch;
  bool     gen_part_phi_isLoaded;
  vector<float> *gen_part_mass_;
  TBranch *gen_part_mass_branch;
  bool     gen_part_mass_isLoaded;
  vector<int> *gen_part_id_;
  TBranch *gen_part_id_branch;
  bool     gen_part_id_isLoaded;
  vector<int> *gen_part_mother_id_;
  TBranch *gen_part_mother_id_branch;
  bool     gen_part_mother_id_isLoaded;
  vector<int> *gen_part_grandma_id_;
  TBranch *gen_part_grandma_id_branch;
  bool     gen_part_grandma_id_isLoaded;
  vector<int> *gen_part_status_;
  TBranch *gen_part_status_branch;
  bool     gen_part_status_isLoaded;
  int      VHchannel_;
  TBranch *VHchannel_branch;
  bool     VHchannel_isLoaded;
  int      Higgschannel_;
  TBranch *Higgschannel_branch;
  bool     Higgschannel_isLoaded;
  int      nGenTauClean_;
  TBranch *nGenTauClean_branch;
  bool     nGenTauClean_isLoaded;
  int      nGenTau_;
  TBranch *nGenTau_branch;
  bool     nGenTau_isLoaded;
  int      hasTau_;
  TBranch *hasTau_branch;
  bool     hasTau_isLoaded;
  int      nLightLep_;
  TBranch *nLightLep_branch;
  bool     nLightLep_isLoaded;
  int      firstgoodvertex_;
  TBranch *firstgoodvertex_branch;
  bool     firstgoodvertex_isLoaded;
  int      nvtx_;
  TBranch *nvtx_branch;
  bool     nvtx_isLoaded;
  int      nTrueInt_;
  TBranch *nTrueInt_branch;
  bool     nTrueInt_isLoaded;
  float    puwgt_;
  TBranch *puwgt_branch;
  bool     puwgt_isLoaded;
  float    puwgt_up_;
  TBranch *puwgt_up_branch;
  bool     puwgt_up_isLoaded;
  float    puwgt_dn_;
  TBranch *puwgt_dn_branch;
  bool     puwgt_dn_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *lep_p4_;
  TBranch *lep_p4_branch;
  bool     lep_p4_isLoaded;
  vector<float> *lep_pt_;
  TBranch *lep_pt_branch;
  bool     lep_pt_isLoaded;
  vector<float> *lep_eta_;
  TBranch *lep_eta_branch;
  bool     lep_eta_isLoaded;
  vector<float> *lep_etaSC_;
  TBranch *lep_etaSC_branch;
  bool     lep_etaSC_isLoaded;
  vector<float> *lep_phi_;
  TBranch *lep_phi_branch;
  bool     lep_phi_isLoaded;
  vector<float> *lep_energy_;
  TBranch *lep_energy_branch;
  bool     lep_energy_isLoaded;
  vector<float> *lep_mva_;
  TBranch *lep_mva_branch;
  bool     lep_mva_isLoaded;
  vector<float> *lep_mvaIso_;
  TBranch *lep_mvaIso_branch;
  bool     lep_mvaIso_isLoaded;
  vector<float> *lep_relIso04DB_;
  TBranch *lep_relIso04DB_branch;
  bool     lep_relIso04DB_isLoaded;
  vector<float> *lep_relIso03EA_;
  TBranch *lep_relIso03EA_branch;
  bool     lep_relIso03EA_isLoaded;
  vector<float> *lep_relIso03EAv4_;
  TBranch *lep_relIso03EAv4_branch;
  bool     lep_relIso03EAv4_isLoaded;
  vector<float> *lep_relIso03EAwLep_;
  TBranch *lep_relIso03EAwLep_branch;
  bool     lep_relIso03EAwLep_isLoaded;
  vector<float> *lep_ip3d_;
  TBranch *lep_ip3d_branch;
  bool     lep_ip3d_isLoaded;
  vector<float> *lep_sip3d_;
  TBranch *lep_sip3d_branch;
  bool     lep_sip3d_isLoaded;
  vector<float> *lep_dxy_;
  TBranch *lep_dxy_branch;
  bool     lep_dxy_isLoaded;
  vector<float> *lep_dz_;
  TBranch *lep_dz_branch;
  bool     lep_dz_isLoaded;
  vector<int> *lep_mc_motherid_;
  TBranch *lep_mc_motherid_branch;
  bool     lep_mc_motherid_isLoaded;
  vector<int> *lep_mc_id_;
  TBranch *lep_mc_id_branch;
  bool     lep_mc_id_isLoaded;
  vector<int> *lep_motherIdv2_;
  TBranch *lep_motherIdv2_branch;
  bool     lep_motherIdv2_isLoaded;
  vector<int> *lep_idx_;
  TBranch *lep_idx_branch;
  bool     lep_idx_isLoaded;
  vector<int> *lep_id_;
  TBranch *lep_id_branch;
  bool     lep_id_isLoaded;
  vector<int> *lep_isWVZVeto_;
  TBranch *lep_isWVZVeto_branch;
  bool     lep_isWVZVeto_isLoaded;
  vector<int> *lep_isWVZNominal_;
  TBranch *lep_isWVZNominal_branch;
  bool     lep_isWVZNominal_isLoaded;
  vector<int> *lep_isVVVVeto_;
  TBranch *lep_isVVVVeto_branch;
  bool     lep_isVVVVeto_isLoaded;
  vector<int> *lep_isVVVNominal_;
  TBranch *lep_isVVVNominal_branch;
  bool     lep_isVVVNominal_isLoaded;
  vector<int> *lep_isTightPOG_;
  TBranch *lep_isTightPOG_branch;
  bool     lep_isTightPOG_isLoaded;
  vector<int> *lep_isMediumPOG_;
  TBranch *lep_isMediumPOG_branch;
  bool     lep_isMediumPOG_isLoaded;
  vector<int> *lep_isMVAwp80NoIsoPOG_;
  TBranch *lep_isMVAwp80NoIsoPOG_branch;
  bool     lep_isMVAwp80NoIsoPOG_isLoaded;
  vector<int> *lep_isMVAwp90NoIsoPOG_;
  TBranch *lep_isMVAwp90NoIsoPOG_branch;
  bool     lep_isMVAwp90NoIsoPOG_isLoaded;
  vector<int> *lep_isMVAwpLooseNoIsoPOG_;
  TBranch *lep_isMVAwpLooseNoIsoPOG_branch;
  bool     lep_isMVAwpLooseNoIsoPOG_isLoaded;
  vector<int> *lep_isMVAwp80IsoPOG_;
  TBranch *lep_isMVAwp80IsoPOG_branch;
  bool     lep_isMVAwp80IsoPOG_isLoaded;
  vector<int> *lep_isMVAwp90IsoPOG_;
  TBranch *lep_isMVAwp90IsoPOG_branch;
  bool     lep_isMVAwp90IsoPOG_isLoaded;
  vector<int> *lep_isMVAwpLooseIsoPOG_;
  TBranch *lep_isMVAwpLooseIsoPOG_branch;
  bool     lep_isMVAwpLooseIsoPOG_isLoaded;
  vector<int> *lep_isMVAwpHZZIsoPOG_;
  TBranch *lep_isMVAwpHZZIsoPOG_branch;
  bool     lep_isMVAwpHZZIsoPOG_isLoaded;
  vector<int> *lep_isCutBasedNoIsoVetoPOG_;
  TBranch *lep_isCutBasedNoIsoVetoPOG_branch;
  bool     lep_isCutBasedNoIsoVetoPOG_isLoaded;
  vector<int> *lep_isCutBasedNoIsoLoosePOG_;
  TBranch *lep_isCutBasedNoIsoLoosePOG_branch;
  bool     lep_isCutBasedNoIsoLoosePOG_isLoaded;
  vector<int> *lep_isCutBasedNoIsoMediumPOG_;
  TBranch *lep_isCutBasedNoIsoMediumPOG_branch;
  bool     lep_isCutBasedNoIsoMediumPOG_isLoaded;
  vector<int> *lep_isCutBasedNoIsoTightPOG_;
  TBranch *lep_isCutBasedNoIsoTightPOG_branch;
  bool     lep_isCutBasedNoIsoTightPOG_isLoaded;
  vector<int> *lep_isCutBasedIsoVetoPOG_;
  TBranch *lep_isCutBasedIsoVetoPOG_branch;
  bool     lep_isCutBasedIsoVetoPOG_isLoaded;
  vector<int> *lep_isCutBasedIsoLoosePOG_;
  TBranch *lep_isCutBasedIsoLoosePOG_branch;
  bool     lep_isCutBasedIsoLoosePOG_isLoaded;
  vector<int> *lep_isCutBasedIsoMediumPOG_;
  TBranch *lep_isCutBasedIsoMediumPOG_branch;
  bool     lep_isCutBasedIsoMediumPOG_isLoaded;
  vector<int> *lep_isCutBasedIsoTightPOG_;
  TBranch *lep_isCutBasedIsoTightPOG_branch;
  bool     lep_isCutBasedIsoTightPOG_isLoaded;
  float    met_orig_pt_;
  TBranch *met_orig_pt_branch;
  bool     met_orig_pt_isLoaded;
  float    met_orig_phi_;
  TBranch *met_orig_phi_branch;
  bool     met_orig_phi_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *met_p4_;
  TBranch *met_p4_branch;
  bool     met_p4_isLoaded;
  float    met_pt_;
  TBranch *met_pt_branch;
  bool     met_pt_isLoaded;
  float    met_phi_;
  TBranch *met_phi_branch;
  bool     met_phi_isLoaded;
  float    met_up_pt_;
  TBranch *met_up_pt_branch;
  bool     met_up_pt_isLoaded;
  float    met_up_phi_;
  TBranch *met_up_phi_branch;
  bool     met_up_phi_isLoaded;
  float    met_dn_pt_;
  TBranch *met_dn_pt_branch;
  bool     met_dn_pt_isLoaded;
  float    met_dn_phi_;
  TBranch *met_dn_phi_branch;
  bool     met_dn_phi_isLoaded;
  float    met_smearup_pt_;
  TBranch *met_smearup_pt_branch;
  bool     met_smearup_pt_isLoaded;
  float    met_smearup_phi_;
  TBranch *met_smearup_phi_branch;
  bool     met_smearup_phi_isLoaded;
  float    met_smeardn_pt_;
  TBranch *met_smeardn_pt_branch;
  bool     met_smeardn_pt_isLoaded;
  float    met_smeardn_phi_;
  TBranch *met_smeardn_phi_branch;
  bool     met_smeardn_phi_isLoaded;
  float    met_pileupup_pt_;
  TBranch *met_pileupup_pt_branch;
  bool     met_pileupup_pt_isLoaded;
  float    met_pileupup_phi_;
  TBranch *met_pileupup_phi_branch;
  bool     met_pileupup_phi_isLoaded;
  float    met_pileupdn_pt_;
  TBranch *met_pileupdn_pt_branch;
  bool     met_pileupdn_pt_isLoaded;
  float    met_pileupdn_phi_;
  TBranch *met_pileupdn_phi_branch;
  bool     met_pileupdn_phi_isLoaded;
  float    met_gen_pt_;
  TBranch *met_gen_pt_branch;
  bool     met_gen_pt_isLoaded;
  float    met_gen_phi_;
  TBranch *met_gen_phi_branch;
  bool     met_gen_phi_isLoaded;
  int      passesMETfiltersRun2_;
  TBranch *passesMETfiltersRun2_branch;
  bool     passesMETfiltersRun2_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_p4_;
  TBranch *jets_p4_branch;
  bool     jets_p4_isLoaded;
  vector<float> *jets_pt_;
  TBranch *jets_pt_branch;
  bool     jets_pt_isLoaded;
  vector<float> *jets_eta_;
  TBranch *jets_eta_branch;
  bool     jets_eta_isLoaded;
  vector<float> *jets_phi_;
  TBranch *jets_phi_branch;
  bool     jets_phi_isLoaded;
  vector<float> *jets_mass_;
  TBranch *jets_mass_branch;
  bool     jets_mass_isLoaded;
  vector<float> *jets_btag_score_;
  TBranch *jets_btag_score_branch;
  bool     jets_btag_score_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_cen_p4_;
  TBranch *jets_cen_p4_branch;
  bool     jets_cen_p4_isLoaded;
  vector<float> *jets_cen_pt_;
  TBranch *jets_cen_pt_branch;
  bool     jets_cen_pt_isLoaded;
  vector<float> *jets_cen_eta_;
  TBranch *jets_cen_eta_branch;
  bool     jets_cen_eta_isLoaded;
  vector<float> *jets_cen_phi_;
  TBranch *jets_cen_phi_branch;
  bool     jets_cen_phi_isLoaded;
  vector<float> *jets_cen_mass_;
  TBranch *jets_cen_mass_branch;
  bool     jets_cen_mass_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *rawjets_p4_;
  TBranch *rawjets_p4_branch;
  bool     rawjets_p4_isLoaded;
  vector<float> *rawjets_pt_;
  TBranch *rawjets_pt_branch;
  bool     rawjets_pt_isLoaded;
  vector<float> *rawjets_eta_;
  TBranch *rawjets_eta_branch;
  bool     rawjets_eta_isLoaded;
  vector<float> *rawjets_phi_;
  TBranch *rawjets_phi_branch;
  bool     rawjets_phi_isLoaded;
  vector<float> *rawjets_mass_;
  TBranch *rawjets_mass_branch;
  bool     rawjets_mass_isLoaded;
  vector<float> *rawjets_JEC_;
  TBranch *rawjets_JEC_branch;
  bool     rawjets_JEC_isLoaded;
  vector<int> *rawjets_passJetID_;
  TBranch *rawjets_passJetID_branch;
  bool     rawjets_passJetID_isLoaded;
  vector<int> *rawjets_isORwLep_;
  TBranch *rawjets_isORwLep_branch;
  bool     rawjets_isORwLep_isLoaded;
  int      nj_;
  TBranch *nj_branch;
  bool     nj_isLoaded;
  int      nj_up_;
  TBranch *nj_up_branch;
  bool     nj_up_isLoaded;
  int      nj_dn_;
  TBranch *nj_dn_branch;
  bool     nj_dn_isLoaded;
  int      nb_;
  TBranch *nb_branch;
  bool     nb_isLoaded;
  int      nb_up_;
  TBranch *nb_up_branch;
  bool     nb_up_isLoaded;
  int      nb_dn_;
  TBranch *nb_dn_branch;
  bool     nb_dn_isLoaded;
  int      nbmed_;
  TBranch *nbmed_branch;
  bool     nbmed_isLoaded;
  int      nbmed_up_;
  TBranch *nbmed_up_branch;
  bool     nbmed_up_isLoaded;
  int      nbmed_dn_;
  TBranch *nbmed_dn_branch;
  bool     nbmed_dn_isLoaded;
  int      nbtight_;
  TBranch *nbtight_branch;
  bool     nbtight_isLoaded;
  int      nbtight_up_;
  TBranch *nbtight_up_branch;
  bool     nbtight_up_isLoaded;
  int      nbtight_dn_;
  TBranch *nbtight_dn_branch;
  bool     nbtight_dn_isLoaded;
  float    ht_;
  TBranch *ht_branch;
  bool     ht_isLoaded;
  int      nj_cen_;
  TBranch *nj_cen_branch;
  bool     nj_cen_isLoaded;
  int      nj_cen_up_;
  TBranch *nj_cen_up_branch;
  bool     nj_cen_up_isLoaded;
  int      nj_cen_dn_;
  TBranch *nj_cen_dn_branch;
  bool     nj_cen_dn_isLoaded;
  float    weight_btagsf_;
  TBranch *weight_btagsf_branch;
  bool     weight_btagsf_isLoaded;
  float    weight_btagsf_heavy_DN_;
  TBranch *weight_btagsf_heavy_DN_branch;
  bool     weight_btagsf_heavy_DN_isLoaded;
  float    weight_btagsf_heavy_UP_;
  TBranch *weight_btagsf_heavy_UP_branch;
  bool     weight_btagsf_heavy_UP_isLoaded;
  float    weight_btagsf_light_DN_;
  TBranch *weight_btagsf_light_DN_branch;
  bool     weight_btagsf_light_DN_isLoaded;
  float    weight_btagsf_light_UP_;
  TBranch *weight_btagsf_light_UP_branch;
  bool     weight_btagsf_light_UP_isLoaded;
  float    weight_med_btagsf_;
  TBranch *weight_med_btagsf_branch;
  bool     weight_med_btagsf_isLoaded;
  float    weight_med_btagsf_heavy_DN_;
  TBranch *weight_med_btagsf_heavy_DN_branch;
  bool     weight_med_btagsf_heavy_DN_isLoaded;
  float    weight_med_btagsf_heavy_UP_;
  TBranch *weight_med_btagsf_heavy_UP_branch;
  bool     weight_med_btagsf_heavy_UP_isLoaded;
  float    weight_med_btagsf_light_DN_;
  TBranch *weight_med_btagsf_light_DN_branch;
  bool     weight_med_btagsf_light_DN_isLoaded;
  float    weight_med_btagsf_light_UP_;
  TBranch *weight_med_btagsf_light_UP_branch;
  bool     weight_med_btagsf_light_UP_isLoaded;
  float    weight_tight_btagsf_;
  TBranch *weight_tight_btagsf_branch;
  bool     weight_tight_btagsf_isLoaded;
  float    weight_tight_btagsf_heavy_DN_;
  TBranch *weight_tight_btagsf_heavy_DN_branch;
  bool     weight_tight_btagsf_heavy_DN_isLoaded;
  float    weight_tight_btagsf_heavy_UP_;
  TBranch *weight_tight_btagsf_heavy_UP_branch;
  bool     weight_tight_btagsf_heavy_UP_isLoaded;
  float    weight_tight_btagsf_light_DN_;
  TBranch *weight_tight_btagsf_light_DN_branch;
  bool     weight_tight_btagsf_light_DN_isLoaded;
  float    weight_tight_btagsf_light_UP_;
  TBranch *weight_tight_btagsf_light_UP_branch;
  bool     weight_tight_btagsf_light_UP_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *J_p4_;
  TBranch *J_p4_branch;
  bool     J_p4_isLoaded;
  vector<float> *J_pt_;
  TBranch *J_pt_branch;
  bool     J_pt_isLoaded;
  vector<float> *J_eta_;
  TBranch *J_eta_branch;
  bool     J_eta_isLoaded;
  vector<float> *J_phi_;
  TBranch *J_phi_branch;
  bool     J_phi_isLoaded;
  vector<float> *J_mass_;
  TBranch *J_mass_branch;
  bool     J_mass_isLoaded;
  vector<float> *J_energy_;
  TBranch *J_energy_branch;
  bool     J_energy_isLoaded;
  vector<float> *J_SD_mass_;
  TBranch *J_SD_mass_branch;
  bool     J_SD_mass_isLoaded;
  vector<float> *J_tau31_;
  TBranch *J_tau31_branch;
  bool     J_tau31_isLoaded;
  vector<float> *J_tau32_;
  TBranch *J_tau32_branch;
  bool     J_tau32_isLoaded;
  vector<float> *J_tau21_;
  TBranch *J_tau21_branch;
  bool     J_tau21_isLoaded;
  vector<float> *J_tau1_;
  TBranch *J_tau1_branch;
  bool     J_tau1_isLoaded;
  vector<float> *J_tau2_;
  TBranch *J_tau2_branch;
  bool     J_tau2_isLoaded;
  vector<float> *J_tau3_;
  TBranch *J_tau3_branch;
  bool     J_tau3_isLoaded;
  vector<float> *J_undoJEC_;
  TBranch *J_undoJEC_branch;
  bool     J_undoJEC_isLoaded;
  vector<float> *J_shift_;
  TBranch *J_shift_branch;
  bool     J_shift_isLoaded;
  vector<float> *J_deep_rawdisc_h4q_;
  TBranch *J_deep_rawdisc_h4q_branch;
  bool     J_deep_rawdisc_h4q_isLoaded;
  vector<float> *J_deep_rawdisc_hbb_;
  TBranch *J_deep_rawdisc_hbb_branch;
  bool     J_deep_rawdisc_hbb_isLoaded;
  vector<float> *J_deep_rawdisc_qcd_;
  TBranch *J_deep_rawdisc_qcd_branch;
  bool     J_deep_rawdisc_qcd_isLoaded;
  vector<float> *J_deep_rawdisc_top_;
  TBranch *J_deep_rawdisc_top_branch;
  bool     J_deep_rawdisc_top_isLoaded;
  vector<float> *J_deep_rawdisc_w_;
  TBranch *J_deep_rawdisc_w_branch;
  bool     J_deep_rawdisc_w_isLoaded;
  vector<float> *J_deep_rawdisc_z_;
  TBranch *J_deep_rawdisc_z_branch;
  bool     J_deep_rawdisc_z_isLoaded;
  vector<float> *J_deep_rawdisc_zbb_;
  TBranch *J_deep_rawdisc_zbb_branch;
  bool     J_deep_rawdisc_zbb_isLoaded;
  vector<float> *J_softdropPuppiSubjet1_pt_;
  TBranch *J_softdropPuppiSubjet1_pt_branch;
  bool     J_softdropPuppiSubjet1_pt_isLoaded;
  vector<float> *J_softdropPuppiSubjet1_eta_;
  TBranch *J_softdropPuppiSubjet1_eta_branch;
  bool     J_softdropPuppiSubjet1_eta_isLoaded;
  vector<float> *J_softdropPuppiSubjet1_phi_;
  TBranch *J_softdropPuppiSubjet1_phi_branch;
  bool     J_softdropPuppiSubjet1_phi_isLoaded;
  vector<float> *J_softdropPuppiSubjet1_mass_;
  TBranch *J_softdropPuppiSubjet1_mass_branch;
  bool     J_softdropPuppiSubjet1_mass_isLoaded;
  vector<float> *J_softdropPuppiSubjet1_energy_;
  TBranch *J_softdropPuppiSubjet1_energy_branch;
  bool     J_softdropPuppiSubjet1_energy_isLoaded;
  vector<float> *J_softdropPuppiSubjet2_pt_;
  TBranch *J_softdropPuppiSubjet2_pt_branch;
  bool     J_softdropPuppiSubjet2_pt_isLoaded;
  vector<float> *J_softdropPuppiSubjet2_eta_;
  TBranch *J_softdropPuppiSubjet2_eta_branch;
  bool     J_softdropPuppiSubjet2_eta_isLoaded;
  vector<float> *J_softdropPuppiSubjet2_phi_;
  TBranch *J_softdropPuppiSubjet2_phi_branch;
  bool     J_softdropPuppiSubjet2_phi_isLoaded;
  vector<float> *J_softdropPuppiSubjet2_mass_;
  TBranch *J_softdropPuppiSubjet2_mass_branch;
  bool     J_softdropPuppiSubjet2_mass_isLoaded;
  vector<float> *J_softdropPuppiSubjet2_energy_;
  TBranch *J_softdropPuppiSubjet2_energy_branch;
  bool     J_softdropPuppiSubjet2_energy_isLoaded;
  int      nVlep_;
  TBranch *nVlep_branch;
  bool     nVlep_isLoaded;
  int      nNlep_;
  TBranch *nNlep_branch;
  bool     nNlep_isLoaded;
  int      lep_ZCand_idx1_;
  TBranch *lep_ZCand_idx1_branch;
  bool     lep_ZCand_idx1_isLoaded;
  int      lep_ZCand_idx2_;
  TBranch *lep_ZCand_idx2_branch;
  bool     lep_ZCand_idx2_isLoaded;
  int      lep_Nom_idx1_;
  TBranch *lep_Nom_idx1_branch;
  bool     lep_Nom_idx1_isLoaded;
  int      lep_Nom_idx2_;
  TBranch *lep_Nom_idx2_branch;
  bool     lep_Nom_idx2_isLoaded;
  int      lep_Nom_idx3_;
  TBranch *lep_Nom_idx3_branch;
  bool     lep_Nom_idx3_isLoaded;
  int      lep_2ndZCand_idx1_;
  TBranch *lep_2ndZCand_idx1_branch;
  bool     lep_2ndZCand_idx1_isLoaded;
  int      lep_2ndZCand_idx2_;
  TBranch *lep_2ndZCand_idx2_branch;
  bool     lep_2ndZCand_idx2_isLoaded;
  int      lep_WCand_idx1_;
  TBranch *lep_WCand_idx1_branch;
  bool     lep_WCand_idx1_isLoaded;
  int      lep_Z_idx0_;
  TBranch *lep_Z_idx0_branch;
  bool     lep_Z_idx0_isLoaded;
  int      lep_Z_idx1_;
  TBranch *lep_Z_idx1_branch;
  bool     lep_Z_idx1_isLoaded;
  int      lep_N_idx0_;
  TBranch *lep_N_idx0_branch;
  bool     lep_N_idx0_isLoaded;
  int      lep_N_idx1_;
  TBranch *lep_N_idx1_branch;
  bool     lep_N_idx1_isLoaded;
  float    MllN_;
  TBranch *MllN_branch;
  bool     MllN_isLoaded;
  float    MllZ_;
  TBranch *MllZ_branch;
  bool     MllZ_isLoaded;
  float    ZPt_;
  TBranch *ZPt_branch;
  bool     ZPt_isLoaded;
  float    lep1Pt_;
  TBranch *lep1Pt_branch;
  bool     lep1Pt_isLoaded;
  float    lep2Pt_;
  TBranch *lep2Pt_branch;
  bool     lep2Pt_isLoaded;
  float    lep3Pt_;
  TBranch *lep3Pt_branch;
  bool     lep3Pt_isLoaded;
  float    lep4Pt_;
  TBranch *lep4Pt_branch;
  bool     lep4Pt_isLoaded;
  float    lep3Id_;
  TBranch *lep3Id_branch;
  bool     lep3Id_isLoaded;
  float    lep4Id_;
  TBranch *lep4Id_branch;
  bool     lep4Id_isLoaded;
  float    lep3MT_;
  TBranch *lep3MT_branch;
  bool     lep3MT_isLoaded;
  float    lep4MT_;
  TBranch *lep4MT_branch;
  bool     lep4MT_isLoaded;
  float    lep34MT_;
  TBranch *lep34MT_branch;
  bool     lep34MT_isLoaded;
  float    lep1dZ_;
  TBranch *lep1dZ_branch;
  bool     lep1dZ_isLoaded;
  float    lep2dZ_;
  TBranch *lep2dZ_branch;
  bool     lep2dZ_isLoaded;
  float    lep3dZ_;
  TBranch *lep3dZ_branch;
  bool     lep3dZ_isLoaded;
  float    lep4dZ_;
  TBranch *lep4dZ_branch;
  bool     lep4dZ_isLoaded;
  float    pt_zeta_;
  TBranch *pt_zeta_branch;
  bool     pt_zeta_isLoaded;
  float    pt_zeta_vis_;
  TBranch *pt_zeta_vis_branch;
  bool     pt_zeta_vis_isLoaded;
  float    phi0_;
  TBranch *phi0_branch;
  bool     phi0_isLoaded;
  float    phi_;
  TBranch *phi_branch;
  bool     phi_isLoaded;
  float    phiH_;
  TBranch *phiH_branch;
  bool     phiH_isLoaded;
  float    theta0_;
  TBranch *theta0_branch;
  bool     theta0_isLoaded;
  float    theta1_;
  TBranch *theta1_branch;
  bool     theta1_isLoaded;
  float    theta2_;
  TBranch *theta2_branch;
  bool     theta2_isLoaded;
  float    minDRJetToLep3_;
  TBranch *minDRJetToLep3_branch;
  bool     minDRJetToLep3_isLoaded;
  float    minDRJetToLep4_;
  TBranch *minDRJetToLep4_branch;
  bool     minDRJetToLep4_isLoaded;
  float    jet1Pt_;
  TBranch *jet1Pt_branch;
  bool     jet1Pt_isLoaded;
  float    jet2Pt_;
  TBranch *jet2Pt_branch;
  bool     jet2Pt_isLoaded;
  float    jet3Pt_;
  TBranch *jet3Pt_branch;
  bool     jet3Pt_isLoaded;
  float    jet4Pt_;
  TBranch *jet4Pt_branch;
  bool     jet4Pt_isLoaded;
  float    jet1BtagScore_;
  TBranch *jet1BtagScore_branch;
  bool     jet1BtagScore_isLoaded;
  float    jet2BtagScore_;
  TBranch *jet2BtagScore_branch;
  bool     jet2BtagScore_isLoaded;
  float    jet3BtagScore_;
  TBranch *jet3BtagScore_branch;
  bool     jet3BtagScore_isLoaded;
  float    jet4BtagScore_;
  TBranch *jet4BtagScore_branch;
  bool     jet4BtagScore_isLoaded;
  float    wwz_vs_ttz_bVeto_;
  TBranch *wwz_vs_ttz_bVeto_branch;
  bool     wwz_vs_ttz_bVeto_isLoaded;
  float    wwz_vs_ttz_emu_;
  TBranch *wwz_vs_ttz_emu_branch;
  bool     wwz_vs_ttz_emu_isLoaded;
  float    wwz_vs_ttz_nbAll_;
  TBranch *wwz_vs_ttz_nbAll_branch;
  bool     wwz_vs_ttz_nbAll_isLoaded;
  float    wwz_vs_ttz_OffZ_;
  TBranch *wwz_vs_ttz_OffZ_branch;
  bool     wwz_vs_ttz_OffZ_isLoaded;
  float    wwz_vs_ttzzz_bVeto_;
  TBranch *wwz_vs_ttzzz_bVeto_branch;
  bool     wwz_vs_ttzzz_bVeto_isLoaded;
  float    wwz_vs_ttzzz_emu_;
  TBranch *wwz_vs_ttzzz_emu_branch;
  bool     wwz_vs_ttzzz_emu_isLoaded;
  float    wwz_vs_ttzzz_OffZ_;
  TBranch *wwz_vs_ttzzz_OffZ_branch;
  bool     wwz_vs_ttzzz_OffZ_isLoaded;
  float    wwz_vs_zz_emu_;
  TBranch *wwz_vs_zz_emu_branch;
  bool     wwz_vs_zz_emu_isLoaded;
  float    wwz_vs_zz_emuHighTTZBDT_;
  TBranch *wwz_vs_zz_emuHighTTZBDT_branch;
  bool     wwz_vs_zz_emuHighTTZBDT_isLoaded;
  float    wwz_vs_zz_OffZ_;
  TBranch *wwz_vs_zz_OffZ_branch;
  bool     wwz_vs_zz_OffZ_isLoaded;
  float    wwz_vs_zz_OffZHighTTZBDT_;
  TBranch *wwz_vs_zz_OffZHighTTZBDT_branch;
  bool     wwz_vs_zz_OffZHighTTZBDT_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &genps_weight();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const float &weight_nominal();
  const int &HLT_DoubleMu();
  const int &HLT_DoubleEl();
  const int &HLT_MuEG();
  const int &pass_duplicate_ee_em_mm();
  const int &pass_duplicate_mm_em_ee();
  const float &gen_ht();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_V_p4();
  const vector<float> &gen_V_pt();
  const vector<float> &gen_V_eta();
  const vector<float> &gen_V_phi();
  const vector<float> &gen_V_mass();
  const vector<int> &gen_V_id();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_lep_p4();
  const vector<float> &gen_lep_pt();
  const vector<float> &gen_lep_eta();
  const vector<float> &gen_lep_phi();
  const vector<float> &gen_lep_mass();
  const vector<int> &gen_lep_id();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_child_p4();
  const vector<float> &gen_child_pt();
  const vector<float> &gen_child_eta();
  const vector<float> &gen_child_phi();
  const vector<float> &gen_child_mass();
  const vector<int> &gen_child_id();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_part_p4();
  const vector<float> &gen_part_pt();
  const vector<float> &gen_part_eta();
  const vector<float> &gen_part_phi();
  const vector<float> &gen_part_mass();
  const vector<int> &gen_part_id();
  const vector<int> &gen_part_mother_id();
  const vector<int> &gen_part_grandma_id();
  const vector<int> &gen_part_status();
  const int &VHchannel();
  const int &Higgschannel();
  const int &nGenTauClean();
  const int &nGenTau();
  const int &hasTau();
  const int &nLightLep();
  const int &firstgoodvertex();
  const int &nvtx();
  const int &nTrueInt();
  const float &puwgt();
  const float &puwgt_up();
  const float &puwgt_dn();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_etaSC();
  const vector<float> &lep_phi();
  const vector<float> &lep_energy();
  const vector<float> &lep_mva();
  const vector<float> &lep_mvaIso();
  const vector<float> &lep_relIso04DB();
  const vector<float> &lep_relIso03EA();
  const vector<float> &lep_relIso03EAv4();
  const vector<float> &lep_relIso03EAwLep();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_sip3d();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<int> &lep_mc_motherid();
  const vector<int> &lep_mc_id();
  const vector<int> &lep_motherIdv2();
  const vector<int> &lep_idx();
  const vector<int> &lep_id();
  const vector<int> &lep_isWVZVeto();
  const vector<int> &lep_isWVZNominal();
  const vector<int> &lep_isVVVVeto();
  const vector<int> &lep_isVVVNominal();
  const vector<int> &lep_isTightPOG();
  const vector<int> &lep_isMediumPOG();
  const vector<int> &lep_isMVAwp80NoIsoPOG();
  const vector<int> &lep_isMVAwp90NoIsoPOG();
  const vector<int> &lep_isMVAwpLooseNoIsoPOG();
  const vector<int> &lep_isMVAwp80IsoPOG();
  const vector<int> &lep_isMVAwp90IsoPOG();
  const vector<int> &lep_isMVAwpLooseIsoPOG();
  const vector<int> &lep_isMVAwpHZZIsoPOG();
  const vector<int> &lep_isCutBasedNoIsoVetoPOG();
  const vector<int> &lep_isCutBasedNoIsoLoosePOG();
  const vector<int> &lep_isCutBasedNoIsoMediumPOG();
  const vector<int> &lep_isCutBasedNoIsoTightPOG();
  const vector<int> &lep_isCutBasedIsoVetoPOG();
  const vector<int> &lep_isCutBasedIsoLoosePOG();
  const vector<int> &lep_isCutBasedIsoMediumPOG();
  const vector<int> &lep_isCutBasedIsoTightPOG();
  const float &met_orig_pt();
  const float &met_orig_phi();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &met_p4();
  const float &met_pt();
  const float &met_phi();
  const float &met_up_pt();
  const float &met_up_phi();
  const float &met_dn_pt();
  const float &met_dn_phi();
  const float &met_smearup_pt();
  const float &met_smearup_phi();
  const float &met_smeardn_pt();
  const float &met_smeardn_phi();
  const float &met_pileupup_pt();
  const float &met_pileupup_phi();
  const float &met_pileupdn_pt();
  const float &met_pileupdn_phi();
  const float &met_gen_pt();
  const float &met_gen_phi();
  const int &passesMETfiltersRun2();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<float> &jets_pt();
  const vector<float> &jets_eta();
  const vector<float> &jets_phi();
  const vector<float> &jets_mass();
  const vector<float> &jets_btag_score();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_cen_p4();
  const vector<float> &jets_cen_pt();
  const vector<float> &jets_cen_eta();
  const vector<float> &jets_cen_phi();
  const vector<float> &jets_cen_mass();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &rawjets_p4();
  const vector<float> &rawjets_pt();
  const vector<float> &rawjets_eta();
  const vector<float> &rawjets_phi();
  const vector<float> &rawjets_mass();
  const vector<float> &rawjets_JEC();
  const vector<int> &rawjets_passJetID();
  const vector<int> &rawjets_isORwLep();
  const int &nj();
  const int &nj_up();
  const int &nj_dn();
  const int &nb();
  const int &nb_up();
  const int &nb_dn();
  const int &nbmed();
  const int &nbmed_up();
  const int &nbmed_dn();
  const int &nbtight();
  const int &nbtight_up();
  const int &nbtight_dn();
  const float &ht();
  const int &nj_cen();
  const int &nj_cen_up();
  const int &nj_cen_dn();
  const float &weight_btagsf();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_light_UP();
  const float &weight_med_btagsf();
  const float &weight_med_btagsf_heavy_DN();
  const float &weight_med_btagsf_heavy_UP();
  const float &weight_med_btagsf_light_DN();
  const float &weight_med_btagsf_light_UP();
  const float &weight_tight_btagsf();
  const float &weight_tight_btagsf_heavy_DN();
  const float &weight_tight_btagsf_heavy_UP();
  const float &weight_tight_btagsf_light_DN();
  const float &weight_tight_btagsf_light_UP();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &J_p4();
  const vector<float> &J_pt();
  const vector<float> &J_eta();
  const vector<float> &J_phi();
  const vector<float> &J_mass();
  const vector<float> &J_energy();
  const vector<float> &J_SD_mass();
  const vector<float> &J_tau31();
  const vector<float> &J_tau32();
  const vector<float> &J_tau21();
  const vector<float> &J_tau1();
  const vector<float> &J_tau2();
  const vector<float> &J_tau3();
  const vector<float> &J_undoJEC();
  const vector<float> &J_shift();
  const vector<float> &J_deep_rawdisc_h4q();
  const vector<float> &J_deep_rawdisc_hbb();
  const vector<float> &J_deep_rawdisc_qcd();
  const vector<float> &J_deep_rawdisc_top();
  const vector<float> &J_deep_rawdisc_w();
  const vector<float> &J_deep_rawdisc_z();
  const vector<float> &J_deep_rawdisc_zbb();
  const vector<float> &J_softdropPuppiSubjet1_pt();
  const vector<float> &J_softdropPuppiSubjet1_eta();
  const vector<float> &J_softdropPuppiSubjet1_phi();
  const vector<float> &J_softdropPuppiSubjet1_mass();
  const vector<float> &J_softdropPuppiSubjet1_energy();
  const vector<float> &J_softdropPuppiSubjet2_pt();
  const vector<float> &J_softdropPuppiSubjet2_eta();
  const vector<float> &J_softdropPuppiSubjet2_phi();
  const vector<float> &J_softdropPuppiSubjet2_mass();
  const vector<float> &J_softdropPuppiSubjet2_energy();
  const int &nVlep();
  const int &nNlep();
  const int &lep_ZCand_idx1();
  const int &lep_ZCand_idx2();
  const int &lep_Nom_idx1();
  const int &lep_Nom_idx2();
  const int &lep_Nom_idx3();
  const int &lep_2ndZCand_idx1();
  const int &lep_2ndZCand_idx2();
  const int &lep_WCand_idx1();
  const int &lep_Z_idx0();
  const int &lep_Z_idx1();
  const int &lep_N_idx0();
  const int &lep_N_idx1();
  const float &MllN();
  const float &MllZ();
  const float &ZPt();
  const float &lep1Pt();
  const float &lep2Pt();
  const float &lep3Pt();
  const float &lep4Pt();
  const float &lep3Id();
  const float &lep4Id();
  const float &lep3MT();
  const float &lep4MT();
  const float &lep34MT();
  const float &lep1dZ();
  const float &lep2dZ();
  const float &lep3dZ();
  const float &lep4dZ();
  const float &pt_zeta();
  const float &pt_zeta_vis();
  const float &phi0();
  const float &phi();
  const float &phiH();
  const float &theta0();
  const float &theta1();
  const float &theta2();
  const float &minDRJetToLep3();
  const float &minDRJetToLep4();
  const float &jet1Pt();
  const float &jet2Pt();
  const float &jet3Pt();
  const float &jet4Pt();
  const float &jet1BtagScore();
  const float &jet2BtagScore();
  const float &jet3BtagScore();
  const float &jet4BtagScore();
  const float &wwz_vs_ttz_bVeto();
  const float &wwz_vs_ttz_emu();
  const float &wwz_vs_ttz_nbAll();
  const float &wwz_vs_ttz_OffZ();
  const float &wwz_vs_ttzzz_bVeto();
  const float &wwz_vs_ttzzz_emu();
  const float &wwz_vs_ttzzz_OffZ();
  const float &wwz_vs_zz_emu();
  const float &wwz_vs_zz_emuHighTTZBDT();
  const float &wwz_vs_zz_OffZ();
  const float &wwz_vs_zz_OffZHighTTZBDT();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern wvztree wvz;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &genps_weight();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const float &weight_nominal();
  const int &HLT_DoubleMu();
  const int &HLT_DoubleEl();
  const int &HLT_MuEG();
  const int &pass_duplicate_ee_em_mm();
  const int &pass_duplicate_mm_em_ee();
  const float &gen_ht();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_V_p4();
  const vector<float> &gen_V_pt();
  const vector<float> &gen_V_eta();
  const vector<float> &gen_V_phi();
  const vector<float> &gen_V_mass();
  const vector<int> &gen_V_id();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_lep_p4();
  const vector<float> &gen_lep_pt();
  const vector<float> &gen_lep_eta();
  const vector<float> &gen_lep_phi();
  const vector<float> &gen_lep_mass();
  const vector<int> &gen_lep_id();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_child_p4();
  const vector<float> &gen_child_pt();
  const vector<float> &gen_child_eta();
  const vector<float> &gen_child_phi();
  const vector<float> &gen_child_mass();
  const vector<int> &gen_child_id();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gen_part_p4();
  const vector<float> &gen_part_pt();
  const vector<float> &gen_part_eta();
  const vector<float> &gen_part_phi();
  const vector<float> &gen_part_mass();
  const vector<int> &gen_part_id();
  const vector<int> &gen_part_mother_id();
  const vector<int> &gen_part_grandma_id();
  const vector<int> &gen_part_status();
  const int &VHchannel();
  const int &Higgschannel();
  const int &nGenTauClean();
  const int &nGenTau();
  const int &hasTau();
  const int &nLightLep();
  const int &firstgoodvertex();
  const int &nvtx();
  const int &nTrueInt();
  const float &puwgt();
  const float &puwgt_up();
  const float &puwgt_dn();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_etaSC();
  const vector<float> &lep_phi();
  const vector<float> &lep_energy();
  const vector<float> &lep_mva();
  const vector<float> &lep_mvaIso();
  const vector<float> &lep_relIso04DB();
  const vector<float> &lep_relIso03EA();
  const vector<float> &lep_relIso03EAv4();
  const vector<float> &lep_relIso03EAwLep();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_sip3d();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<int> &lep_mc_motherid();
  const vector<int> &lep_mc_id();
  const vector<int> &lep_motherIdv2();
  const vector<int> &lep_idx();
  const vector<int> &lep_id();
  const vector<int> &lep_isWVZVeto();
  const vector<int> &lep_isWVZNominal();
  const vector<int> &lep_isVVVVeto();
  const vector<int> &lep_isVVVNominal();
  const vector<int> &lep_isTightPOG();
  const vector<int> &lep_isMediumPOG();
  const vector<int> &lep_isMVAwp80NoIsoPOG();
  const vector<int> &lep_isMVAwp90NoIsoPOG();
  const vector<int> &lep_isMVAwpLooseNoIsoPOG();
  const vector<int> &lep_isMVAwp80IsoPOG();
  const vector<int> &lep_isMVAwp90IsoPOG();
  const vector<int> &lep_isMVAwpLooseIsoPOG();
  const vector<int> &lep_isMVAwpHZZIsoPOG();
  const vector<int> &lep_isCutBasedNoIsoVetoPOG();
  const vector<int> &lep_isCutBasedNoIsoLoosePOG();
  const vector<int> &lep_isCutBasedNoIsoMediumPOG();
  const vector<int> &lep_isCutBasedNoIsoTightPOG();
  const vector<int> &lep_isCutBasedIsoVetoPOG();
  const vector<int> &lep_isCutBasedIsoLoosePOG();
  const vector<int> &lep_isCutBasedIsoMediumPOG();
  const vector<int> &lep_isCutBasedIsoTightPOG();
  const float &met_orig_pt();
  const float &met_orig_phi();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &met_p4();
  const float &met_pt();
  const float &met_phi();
  const float &met_up_pt();
  const float &met_up_phi();
  const float &met_dn_pt();
  const float &met_dn_phi();
  const float &met_smearup_pt();
  const float &met_smearup_phi();
  const float &met_smeardn_pt();
  const float &met_smeardn_phi();
  const float &met_pileupup_pt();
  const float &met_pileupup_phi();
  const float &met_pileupdn_pt();
  const float &met_pileupdn_phi();
  const float &met_gen_pt();
  const float &met_gen_phi();
  const int &passesMETfiltersRun2();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<float> &jets_pt();
  const vector<float> &jets_eta();
  const vector<float> &jets_phi();
  const vector<float> &jets_mass();
  const vector<float> &jets_btag_score();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_cen_p4();
  const vector<float> &jets_cen_pt();
  const vector<float> &jets_cen_eta();
  const vector<float> &jets_cen_phi();
  const vector<float> &jets_cen_mass();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &rawjets_p4();
  const vector<float> &rawjets_pt();
  const vector<float> &rawjets_eta();
  const vector<float> &rawjets_phi();
  const vector<float> &rawjets_mass();
  const vector<float> &rawjets_JEC();
  const vector<int> &rawjets_passJetID();
  const vector<int> &rawjets_isORwLep();
  const int &nj();
  const int &nj_up();
  const int &nj_dn();
  const int &nb();
  const int &nb_up();
  const int &nb_dn();
  const int &nbmed();
  const int &nbmed_up();
  const int &nbmed_dn();
  const int &nbtight();
  const int &nbtight_up();
  const int &nbtight_dn();
  const float &ht();
  const int &nj_cen();
  const int &nj_cen_up();
  const int &nj_cen_dn();
  const float &weight_btagsf();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_light_UP();
  const float &weight_med_btagsf();
  const float &weight_med_btagsf_heavy_DN();
  const float &weight_med_btagsf_heavy_UP();
  const float &weight_med_btagsf_light_DN();
  const float &weight_med_btagsf_light_UP();
  const float &weight_tight_btagsf();
  const float &weight_tight_btagsf_heavy_DN();
  const float &weight_tight_btagsf_heavy_UP();
  const float &weight_tight_btagsf_light_DN();
  const float &weight_tight_btagsf_light_UP();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &J_p4();
  const vector<float> &J_pt();
  const vector<float> &J_eta();
  const vector<float> &J_phi();
  const vector<float> &J_mass();
  const vector<float> &J_energy();
  const vector<float> &J_SD_mass();
  const vector<float> &J_tau31();
  const vector<float> &J_tau32();
  const vector<float> &J_tau21();
  const vector<float> &J_tau1();
  const vector<float> &J_tau2();
  const vector<float> &J_tau3();
  const vector<float> &J_undoJEC();
  const vector<float> &J_shift();
  const vector<float> &J_deep_rawdisc_h4q();
  const vector<float> &J_deep_rawdisc_hbb();
  const vector<float> &J_deep_rawdisc_qcd();
  const vector<float> &J_deep_rawdisc_top();
  const vector<float> &J_deep_rawdisc_w();
  const vector<float> &J_deep_rawdisc_z();
  const vector<float> &J_deep_rawdisc_zbb();
  const vector<float> &J_softdropPuppiSubjet1_pt();
  const vector<float> &J_softdropPuppiSubjet1_eta();
  const vector<float> &J_softdropPuppiSubjet1_phi();
  const vector<float> &J_softdropPuppiSubjet1_mass();
  const vector<float> &J_softdropPuppiSubjet1_energy();
  const vector<float> &J_softdropPuppiSubjet2_pt();
  const vector<float> &J_softdropPuppiSubjet2_eta();
  const vector<float> &J_softdropPuppiSubjet2_phi();
  const vector<float> &J_softdropPuppiSubjet2_mass();
  const vector<float> &J_softdropPuppiSubjet2_energy();
  const int &nVlep();
  const int &nNlep();
  const int &lep_ZCand_idx1();
  const int &lep_ZCand_idx2();
  const int &lep_Nom_idx1();
  const int &lep_Nom_idx2();
  const int &lep_Nom_idx3();
  const int &lep_2ndZCand_idx1();
  const int &lep_2ndZCand_idx2();
  const int &lep_WCand_idx1();
  const int &lep_Z_idx0();
  const int &lep_Z_idx1();
  const int &lep_N_idx0();
  const int &lep_N_idx1();
  const float &MllN();
  const float &MllZ();
  const float &ZPt();
  const float &lep1Pt();
  const float &lep2Pt();
  const float &lep3Pt();
  const float &lep4Pt();
  const float &lep3Id();
  const float &lep4Id();
  const float &lep3MT();
  const float &lep4MT();
  const float &lep34MT();
  const float &lep1dZ();
  const float &lep2dZ();
  const float &lep3dZ();
  const float &lep4dZ();
  const float &pt_zeta();
  const float &pt_zeta_vis();
  const float &phi0();
  const float &phi();
  const float &phiH();
  const float &theta0();
  const float &theta1();
  const float &theta2();
  const float &minDRJetToLep3();
  const float &minDRJetToLep4();
  const float &jet1Pt();
  const float &jet2Pt();
  const float &jet3Pt();
  const float &jet4Pt();
  const float &jet1BtagScore();
  const float &jet2BtagScore();
  const float &jet3BtagScore();
  const float &jet4BtagScore();
  const float &wwz_vs_ttz_bVeto();
  const float &wwz_vs_ttz_emu();
  const float &wwz_vs_ttz_nbAll();
  const float &wwz_vs_ttz_OffZ();
  const float &wwz_vs_ttzzz_bVeto();
  const float &wwz_vs_ttzzz_emu();
  const float &wwz_vs_ttzzz_OffZ();
  const float &wwz_vs_zz_emu();
  const float &wwz_vs_zz_emuHighTTZBDT();
  const float &wwz_vs_zz_OffZ();
  const float &wwz_vs_zz_OffZHighTTZBDT();
}
#endif
